version: '3'

networks:
  photo:

volumes:
  db_data:
  nginx_cache:

services:
  nginx:
    image: nginx
    depends_on:
      # - client
      - api
    volumes:
      - ./etc/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./admin/dist:/srv/admin:ro
      - ./client/dist:/srv/client:ro
      - ./static:/srv/static:ro
      - nginx_cache:/var/cache/nginx
    restart: always
    ports:
      - "${EXTERNAL_PORT:-80}:80"
    networks:
      photo:
        aliases:
          - nginx

  db:
    image: mysql:5
    volumes:
      - db_data:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: aws-photo
      MYSQL_DATABASE: aws-photo
      MYSQL_USER: aws-photo
      MYSQL_PASSWORD: aws-photo
    command: mysqld --character-set-server=utf8 --collation-server=utf8_unicode_ci --init-connect='SET NAMES UTF8;'
    networks:
      photo:
        aliases:
          - db

  api:
    depends_on:
      - db
    build: ./photo-api
    restart: always
    volumes:
      - ./static:/srv/static
    environment:
      TYPEORM_HOST: db
      STATIC_DIR: /static
    networks:
      photo:
        aliases:
          - api

# admin:
#   build:
#     context: .
#     dockerfile: ./admin/Dockerfile
#     args:
#       BASENAME: /admin
#       API_ENDPOINT: /api/v1
#       STATIC_ENDPOINT: /static

# static:
#   build:
#     context: .
#     dockerfile: ./static-server/Dockerfile
#   restart: always
#   volumes:
#     - static:/static:ro
#   environment:
#     STATIC_DIR: /static
#   networks:
#     default:
#       aliases:
#         - static

  client:
    depends_on:
      - api
    build:
      context: .
      dockerfile: ./client/Dockerfile
      args:
        HOSTNAME: ${HOSTNAME:-http://localhost}
        API_ENDPOINT: /api/v1
        STATIC_ENDPOINT: /static
    restart: always
    environment:
      API_ENDPOINT: http://nginx/api/v1
      STATIC_ENDPOINT: /static
      HOSTNAME: ${HOSTNAME:-http://localhost}
    networks:
      photo:
        aliases:
          - client

